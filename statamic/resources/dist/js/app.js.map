{"version":3,"names":[],"mappings":"","sources":["app.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar vm = new Vue({\n    el: '#statamic',\n\n    data: {\n        isPublishPage: false,\n        isPreviewing: false,\n        showShortcuts: false,\n        navVisible: false,\n        version: Statamic.version,\n        flashSuccess: Statamic.flashSuccess,\n        flashError: false,\n        flashSuccessTimer: null,\n        draggingNonFile: false\n    },\n\n    computed: {\n        showPage: function showPage() {\n            return !this.hasSearchResults;\n        },\n\n        hasSearchResults: function hasSearchResults() {\n            return this.$refs.search.hasItems;\n        }\n    },\n\n    methods: {\n        preview: function preview() {\n            var self = this;\n            self.$broadcast('previewing');\n            self.isPreviewing = true;\n\n            $('.sneak-peek-viewport').addClass('on');\n\n            setTimeout(function () {\n                $(self.$el).addClass('sneak-peeking');\n                $('#sneak-peek').find('iframe').show();\n                setTimeout(function () {\n                    $(self.$el).addClass('sneak-peek-editing');\n                }, 200);\n            }, 200);\n        },\n\n        stopPreviewing: function stopPreviewing() {\n            var self = this;\n            var $viewport = $('.sneak-peek-viewport');\n            var $icon = $viewport.find('.icon');\n\n            $(self.$el).removeClass('sneak-peek-editing');\n            $('#sneak-peek').find('iframe').fadeOut().remove();\n            $icon.hide();\n            setTimeout(function () {\n                $(self.$el).removeClass('sneak-peeking');\n                $viewport.removeClass('on');\n                setTimeout(function () {\n                    $icon.show();\n                    self.isPreviewing = false;\n                    self.$broadcast('previewing.stopped');\n                }, 200);\n            }, 500);\n        },\n\n        toggleNav: function toggleNav() {\n            this.navVisible = !this.navVisible;\n        },\n\n        /**\n         * When the dragstart event is triggered.\n         *\n         * This event doesn't get triggered when dragging something from outside the browser,\n         * so we can determine that something other than a file is being dragged.\n         */\n        dragStart: function dragStart() {\n            this.draggingNonFile = true;\n        },\n\n\n        /**\n         * When the dragend event is triggered.\n         *\n         * This event doesn't get triggered when dragging something from outside the browser,\n         * so we can determine that something other than a file is being dragged.\n         */\n        dragEnd: function dragEnd() {\n            this.draggingNonFile = false;\n        }\n    },\n\n    ready: function ready() {\n        var _this = this;\n\n        Mousetrap.bind(['/', 'ctrl+f'], function (e) {\n            $('#global-search').focus();\n        }, 'keyup');\n\n        Mousetrap.bind('?', function (e) {\n            this.showShortcuts = true;\n        }.bind(this), 'keyup');\n\n        Mousetrap.bind('escape', function (e) {\n            this.$broadcast('close-modal');\n            this.$broadcast('close-editor');\n            this.$broadcast('close-selector');\n            this.$broadcast('close-dropdown', null);\n        }.bind(this), 'keyup');\n\n        // Clear the initial flash message after a second.\n        this.flashSuccessTimer = setTimeout(function () {\n            _this.flashSuccess = null;\n        }, 1000);\n\n        // Keep track of whether something other than a file is being dragged\n        // so that components can tell when a file is being dragged.\n        window.addEventListener('dragstart', this.dragStart);\n        window.addEventListener('dragend', this.dragEnd);\n    },\n\n    events: {\n        'setFlashSuccess': function setFlashSuccess(msg, timeout) {\n            var _this2 = this;\n\n            this.flashSuccess = msg;\n\n            clearTimeout(this.flashSuccessTimer);\n\n            if (timeout) {\n                this.flashSuccessTimer = setTimeout(function () {\n                    _this2.flashSuccess = null;\n                }, timeout);\n            }\n        },\n        'setFlashError': function setFlashError(msg) {\n            this.flashError = msg;\n        },\n        'changesMade': function changesMade(changed) {\n            // If true, a confirmation dialog will be displayed when the user tries to\n            // navigate away (or refresh, etc). If false, the dialog will no longer show.\n            if (changed) {\n                window.onbeforeunload = function () {\n                    return '';\n                };\n            } else {\n                window.onbeforeunload = null;\n            }\n        }\n    }\n});\n\n},{}]},{},[1]);\n"],"file":"app.js"}